variables:
  GITLAB_PROJECT: ''
  DOCKER_IMAGE_TAG_ID: $CI_PIPELINE_ID
  GITLAB_PUSH_USER_EMAIL: ''
  GITLAB_PUSH_USER_NAME: ''
  GITLAB_PIPELINE_USER: $GITLAB_PIPELINE_USER
  GITLAB_PIPELINE_PASSWORD: $GITLAB_PIPELINE_PASSWORD
  GITLAB_REGISTRY_URL: ''

.build_script: &build_script
  - docker build -f ./Dockerfile-prod -t $GITLAB_REGISTRY_URL:$DOCKER_IMAGE_TAG .
  - docker login registry.gitlab.com -u $GITLAB_PIPELINE_USER -p $GITLAB_PIPELINE_PASSWORD
  - docker push $GITLAB_REGISTRY_URL:$DOCKER_IMAGE_TAG

.deploy_before_script: &deploy_before_script
  - apt-get update; apt-get -y install wget
  - |
    wget https://github.com/mikefarah/yq/releases/download/v4.12.0/yq_linux_amd64 -O /usr/bin/yq && chmod +x /usr/bin/yq
    yq --version
  - apt-get -y install git

.deploy_script: &deploy_script
  - TEMP_FOLDER="$(mktemp -d)"
  - git clone -b main https://$GITLAB_PIPELINE_USER:$GITLAB_PIPELINE_PASSWORD@gitlab.com/projetos-a7/lululove-api/microservices-helm-charts.git $TEMP_FOLDER
  - cd $TEMP_FOLDER/$PATH_ENVIRONMENT
  - CONTAINER_IMAGE_TAG=$DOCKER_IMAGE_TAG yq e -i '.imageTag = env(CONTAINER_IMAGE_TAG)' ./values.yaml
  - cd ../../
  - git config user.email $GITLAB_PUSH_USER_EMAIL
  - git config user.name $GITLAB_PUSH_USER_NAME
  - git add .
  - git commit -m "versao da aplicacao $GITLAB_PROJECT atualizada para versao $DOCKER_IMAGE_TAG" && git push

.job_template: &build_configuration
  image: docker:20.10.14
  services:
    - docker:20.10.14-dind
  stage: build
  allow_failure: false
  script:
    - *build_script

.job_template: &deploy_configuration
  stage: deploy
  image: ubuntu:18.04
  before_script:
    - *deploy_before_script
  script:
    - *deploy_script

stages:
  - test
  - build
  - deploy

test-unit-application:
  stage: test
  image: node:14.17-alpine
  script:
    - cd app
    - npm i
    - npm run test:module
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && ($CI_COMMIT_BRANCH == "main" || $CI_COMMIT_BRANCH == "homologacao")

build-production:
  variables:
    DOCKER_IMAGE_TAG: prod$DOCKER_IMAGE_TAG_ID
  <<: *build_configuration
  after_script: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"

build-homologation:
  variables:
    DOCKER_IMAGE_TAG: homo$DOCKER_IMAGE_TAG_ID
  <<: *build_configuration
  after_script: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "homologacao"

deploy-production:
  variables:
    DOCKER_IMAGE_TAG: prod$DOCKER_IMAGE_TAG_ID
    PATH_ENVIRONMENT: $GITLAB_PROJECT/prod
  <<: *deploy_configuration
  after_script: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "main"

deploy-homologation:
  variables:
    DOCKER_IMAGE_TAG: homo$DOCKER_IMAGE_TAG_ID
    PATH_ENVIRONMENT: $GITLAB_PROJECT/homo
  <<: *deploy_configuration
  after_script: []
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" && $CI_COMMIT_BRANCH == "homologacao"